// <auto-generated />
using System;
using MyMonolithicApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MyMonolithicApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210410111136_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyMonolithicApp.Infrastructure.Data.Entities.PermissionEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Code");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Code = "urn:my-monolithic-app:permission:can-manage-users",
                            Name = "Can manage users"
                        });
                });

            modelBuilder.Entity("MyMonolithicApp.Infrastructure.Data.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NormalisedName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("NormalisedName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("798673a6-f1fc-494d-b7a6-23bb2cc59667"),
                            ConcurrencyStamp = "577b3e2b-cd63-495a-939c-e11ce9bf713e",
                            Name = "Admin",
                            NormalisedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("MyMonolithicApp.Infrastructure.Data.Entities.RolePermissionEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PermissionCode")
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("RoleId", "PermissionCode");

                    b.HasIndex("PermissionCode");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("798673a6-f1fc-494d-b7a6-23bb2cc59667"),
                            PermissionCode = "urn:my-monolithic-app:permission:can-manage-users"
                        });
                });

            modelBuilder.Entity("MyMonolithicApp.Infrastructure.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalisedUsername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("NormalisedUsername")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64d796fc-9bb9-42c8-9485-1bc40577e356"),
                            ConcurrencyStamp = "36537d3c-7722-4c28-9515-b6e2add48a58",
                            Email = "admin@test.org",
                            NormalisedUsername = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDDQ8I1aZPvbYyGxvL6ZvTcZUD0nLrBYUQKkku2Lnsfa69qkk0hU4dcxQk+nFvwvoA==",
                            RoleId = new Guid("798673a6-f1fc-494d-b7a6-23bb2cc59667"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MyMonolithicApp.Infrastructure.Data.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("MyMonolithicApp.Infrastructure.Data.Entities.PermissionEntity", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyMonolithicApp.Infrastructure.Data.Entities.RoleEntity", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyMonolithicApp.Infrastructure.Data.Entities.UserEntity", b =>
                {
                    b.HasOne("MyMonolithicApp.Infrastructure.Data.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyMonolithicApp.Infrastructure.Data.Entities.PermissionEntity", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MyMonolithicApp.Infrastructure.Data.Entities.RoleEntity", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
